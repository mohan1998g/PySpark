Please find the dataset in Datasets folder

---------------------------------------------------------------------------------------------------------------------------------------------------

Query a list of CITY and STATE from the STATION table.(1)

df = spark.read.option("header", "true").option("sep", "\t").csv("STATION_data.csv")
df.show()

df.createOrReplaceTempView("station")

spark.sql("select city, state from station").show()

df.select("city", "state").show()

---------------------------------------------------------------------------------------------------------------------------------------------------
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.(5)

df = spark.read.option("header", "true").option("sep", "\t").csv("STATION_data.csv")
df.show()

df.createOrReplaceTempView("station")

length_stats = df.withColumn("length", length("city"))
max_length = length_stats.agg(max("length")).collect()[0][0]
min_length = length_stats.agg(min("length")).collect()[0][0]

filtered_df = length_stats.filter((col("length") == max_length) | (col("length") == min_length))

filtered_df.show()

minlength = length_stats.filter(col("length") == max_length).orderBy("city").first()
maxlength = length_stats.filter(col("length") == min_length).orderBy(col("city").desc()).first()

print(minlength, maxlength)

spark.sql(""" (select city,length(city) from station where length(city) = (select min(length(city)) from station) order by city limit 1)

UNION

(select city,length(city) from station where length(city) = (select max(length(city)) from station) order by city limit 1 ); """)

---------------------------------------------------------------------------------------------------------------------------------------------------

Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.(3)

df = spark.read.option("header", "true").option("sep", "\t").csv("STATION_data.csv")
df.show()

df.createOrReplaceTempView("station")

df.filter("id % 2 ==0").select("city").dropDuplicates().show()

spark.sql("select distinct city from station where id%2 ==0").show()

spark.sql("select distinct city from station where id%2 =0").show()

---------------------------------------------------------------------------------------------------------------------------------------------------

Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.(8)

df = spark.read.option("header", "true").option("sep", "\t").csv("STATION_data.csv")
df.show()

df.createOrReplaceTempView("station")

df.filter(col('city').rlike(r'^[AEIOUaeiou].*[AEIOUaeiou]$')).select("city").distinct().show()

spark.sql("select city from station where city rlike '^[AEIOUaeiou].*[AEIOUaeiou]$'").show()

---------------------------------------------------------------------------------------------------------------------------------------------------

Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.(9)

df = spark.read.option("header", "true").option("sep", "\t").csv("STATION_data.csv")
df.show()

df.createOrReplaceTempView("station")

df.filter(~col('city').rlike(r'^[AEIOUaeiou]')).select("city").distinct().show()

spark.sql("select distinct city from station where city not rlike '^[AEIOUaeiou]'").show()

---------------------------------------------------------------------------------------------------------------------------------------------------

Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.(10)

df = spark.read.option("header", "true").option("sep", "\t").csv("STATION_data.csv")
df.show()

df.createOrReplaceTempView("station")

df.filter(~col('city').rlike(r'[AEIOUaeiou]$')).select("city").distinct().show()

spark.sql("select distinct city from station where city not rlike '[AEIOUaeiou]$'").show()

---------------------------------------------------------------------------------------------------------------------------------------------------

Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.(11)

df = spark.read.option("header", "true").option("sep", "\t").csv("STATION_data.csv")
df.show()

df.createOrReplaceTempView("station")

df.filter(~col('city').rlike(r'^[AEIOUaeiou].*[AEIOUaeiou]$')).select("city").distinct().show()

spark.sql("select distinct city from station where city not rlike '^[AEIOUaeiou].*[AEIOUaeiou]$'").show()

---------------------------------------------------------------------------------------------------------------------------------------------------
