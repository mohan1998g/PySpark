df1 = spark.createDataFrame([
        Row(course="dotNET", year=2012, earnings=10000),
        Row(course="Java", year=2012, earnings=20000),
        Row(course="dotNET", year=2012, earnings=5000),
        Row(course="dotNET", year=2013, earnings=48000),
        Row(course="Java", year=2013, earnings=30000),
])
df1.show()

df2 = spark.createDataFrame([
        Row(training="expert", sales=Row(course="dotNET", year=2012, earnings=10000)),
        Row(training="junior", sales=Row(course="Java", year=2012, earnings=20000)),
        Row(training="expert", sales=Row(course="dotNET", year=2012, earnings=5000)),
        Row(training="junior", sales=Row(course="dotNET", year=2013, earnings=48000)),
        Row(training="expert", sales=Row(course="Java", year=2013, earnings=30000)),
])  # doctest: +SKIP
df2.show()  # doctest: +SKIP

# Compute the sum of earnings for each year by course with each course as a separate column
df1.groupBy("year").pivot("course", ["dotNET", "Java"]).sum("earnings").show(truncate=False)
# +—-+——+—–+
# |year|dotNET| Java|
# +—-+——+—–+
# |2012| 15000|20000|
# |2013| 48000|30000|
# +—-+——+—–+
# Or without specifying column values (less efficient)
df1.groupBy("year").pivot("course").sum("earnings").show(truncate=False)
# +—-+—–+——+
# |year| Java|dotNET|
# +—-+—–+——+
# |2012|20000| 15000|
# |2013|30000| 48000|
# +—-+—–+——+
df2.groupBy("sales.year").pivot("sales.course").sum("sales.earnings").show(truncate=False)
# doctest: +SKIP
# +—-+—–+——+
# |year| Java|dotNET|
# +—-+—–+——+
# |2012|20000| 15000|
# |2013|30000| 48000|
# +—-+—–+——+

df2.groupBy("sales.year").pivot("sales.course").avg("sales.earnings").show(truncate=False)

df2.groupBy("sales.year").pivot("sales.course").max("sales.earnings").show(truncate=False)

df2.groupBy("sales.year").pivot("sales.course").min("sales.earnings").show(truncate=False)

df2.groupBy("sales.year").pivot("sales.course").agg(first("sales.earnings")).show(truncate=False)


# Params:
# pivot_col – Name of the column to pivot.
# values – List of values that will be translated to columns in the output DataFrame.

