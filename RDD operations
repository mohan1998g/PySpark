a = 2
print(a)
b = a+1
print(b)
c = "zeyobron"
print(c)
d = [1, 2, 3, 4]
rdd = sc.parallelize(d)
d_proc1 = rdd.map(lambda x: x+2)  # 1st x is accumulator and 2nd x is iterator map is do
d_proc2 = rdd.map(lambda x: x-2)
d_proc3 = rdd.map(lambda x: x*2)
d_proc4 = rdd.map(lambda x: x/2)
d_proc5 = rdd.map(lambda x: x ^ 2)
d_proc6 = rdd.filter(lambda x: x > 2)
d_proc7 = rdd.filter(lambda x: x < 2)
d_proc8 = rdd.filter(lambda x: x <= 2)
d_proc9 = rdd.filter(lambda x: x >= 2)
d_proc10 = rdd.filter(lambda x: x != 2)
print(d_proc1.collect())#  added 2 to every element in d
print(d_proc2.collect())
print(d_proc3.collect())
print(d_proc4.collect())
print(d_proc5.collect())
print(d_proc6.collect())
print(d_proc7.collect())
print(d_proc8.collect())
print(d_proc9.collect())
print(d_proc10.collect())
d = [1, 2, 3]
print()
print("========= RAW INT LIST========")
print()
print(d)
print()
print("========= RDD INT LIST========")
print()
rddint = sc.parallelize(d)
print(rddint.collect())
print()
print("========= ADD INT LIST========")
print()
add = rddint.map(lambda x: x + 2)
print(add.collect())
print()
print("========= Mul INT LIST========")
print()
mul = rddint.map(lambda x: x * 10)
print(mul.collect())
print()
print("========= fil INT LIST========")
print()
fillist = rddint.filter(lambda x: x > 2)
print(fillist.collect())
print()
print("===========RAW STRING LIST=========")
print()
lisstr = ["zeyobron", "zeyo", "analytics" ]
print(lisstr)
print()
print("===========RDD STRING LIST=========")
print()
rddstr=sc.parallelize(lisstr)
print(rddstr.collect())
print()
print("===========ADD STRING LIST=========")
print()
addlis = rddstr.map(lambda x: x + " pvt")
print(addlis.collect())
print()
print("===========REPLACE STRING LIST=========")
print()
reprdd = rddstr.map(lambda x: x.replace("zeyo","tera"))
print(reprdd.collect())
print()
print("===========fil LIST=========")
print()
fillis = rddstr.filter(lambda x: 'zeyo' in x)
print(fillis.collect())
print()
print("===========RAW STRING LIST=========")
print()
lisstr = ["A~B", "C~D"]
print(lisstr)
print()
print("===========RDD STRING LIST=========")
print()
rddstr = sc.parallelize(lisstr)
print(rddstr.collect())
print()
print("===========FlatMap STRING LIST=========")
print()
flat = rddstr.flatMap(lambda x: x.split("~")) #  ['A', 'B', 'C', 'D']
print(flat.collect())
# Usecase Full Code
print()
print("===== RAW LIST======")
rawlist = ["State->TN~City->Chennai", "State->Kerala~City->Trivandrum"]
print(rawlist)
print()
print("===== RDD LIST======")
rddlist = sc.parallelize(rawlist)
print(rddlist.collect())
print()
print("===== flat RDD LIST======")
flat= rddlist.flatMap(lambda x : x.split("~"))
print(flat.collect())
print()
print("===== state rdd list======")
state = flat.filter(lambda x : 'State' in x)
print(state.collect())
print()
print("===== state replace======")
staterep = state.map(lambda x : x.replace("State->",""))
print(staterep.collect())
print()
print("===== City rdd list======")
city = flat.filter(lambda x : 'City' in x )
print(city.collect())
print("===== City replace list======")
cityrep = city.map(lambda x : x.replace("City->",""))
print(cityrep.collect())
print()
print("====== FILE READ======")
print()
data = sc.textFile("state.txt")
data.foreach(print)
print()
print("====== Flat READ======")
print()
flat = data.flatMap(lambda x : x.split(","))
flat.foreach(print)
print()
print("===== state rdd list======")
state = flat.filter(lambda x : 'State' in x)
state.foreach(print)
print()
print("===== state replace======")
staterep = state.map(lambda x : x.replace("State->",""))
staterep.foreach(print)
print()
print("===== City rdd list======")
city = flat.filter(lambda x : 'City' in x )
city.foreach(print)
print()
print("===== City replace list======")
cityrep = city.map(lambda x : x.replace("City->",""))
cityrep.foreach(print)
print()
print("======= RAW DATA=======")
print()
rawdata = sc.textFile("usdata.csv")
rawdata.foreach(print)
print("========== LENGTH GREATER THAN 200==========")
print()
# LEN
len200 = rawdata.filter( lambda x : len(x) > 200)
len200.foreach(print)
print("========== FLATTEN WITH COMMA==========")
print()
flat = len200.flatMap( lambda x : x.split(","))
flat.foreach(print)
print("========== REMOVE HYPHENS==========")
print()
remhy = flat.map(lambda x : x.replace("-",""))
remhy.foreach(print)
print("========== Concat==========")
print()
concat = remhy.map(lambda x : x + ",zeyo")
concat.foreach(print)
print()
print("======= RAW DATA=======")
print()
rawdata = sc.textFile("dt.txt")
rawdata.foreach(print)
print()
print("====== Flat READ======")
print()
flat = rawdata.flatMap(lambda x : x.split(","))
flat.foreach(print)
print()
print("===== City rdd list======")
city = flat.filter(lambda x : 'Gymnastics' in x )
city.foreach(print)
print()
print()
print("===== gymdata rdd list======")
gymdata = rawdata.filter(lambda x : 'Gymnastics' in x )
gymdata.foreach(print)
print()
